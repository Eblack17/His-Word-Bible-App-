{"ast":null,"code":"'use strict';\n\nimport { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity } from \"./Colors.js\";\nimport { makeMutable } from \"./core.js\";\nimport { Extrapolation, interpolate } from \"./interpolation.js\";\nimport { useSharedValue } from \"./hook/useSharedValue.js\";\nimport { ReanimatedError } from \"./errors.js\";\nexport var Extrapolate = Extrapolation;\nvar _worklet_12758345507472_init_data = {\n  code: \"function anonymous(value, inputRange, colors, options) {\\n  const {\\n    interpolate,\\n    Extrapolation,\\n    hsvToColor\\n  } = this._closure;\\n  let h = 0;\\n  const {\\n    useCorrectedHSVInterpolation = true\\n  } = options;\\n  if (useCorrectedHSVInterpolation) {\\n    const correctedInputRange = [inputRange[0]];\\n    const originalH = colors.h;\\n    const correctedH = [originalH[0]];\\n    for (let i = 1; i < originalH.length; ++i) {\\n      const d = originalH[i] - originalH[i - 1];\\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\\n        correctedInputRange.push(inputRange[i]);\\n        correctedInputRange.push(inputRange[i] + 0.00001);\\n        correctedH.push(originalH[i] - 1);\\n        correctedH.push(originalH[i]);\\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\\n        correctedInputRange.push(inputRange[i]);\\n        correctedInputRange.push(inputRange[i] + 0.00001);\\n        correctedH.push(originalH[i] + 1);\\n        correctedH.push(originalH[i]);\\n      } else {\\n        correctedInputRange.push(inputRange[i]);\\n        correctedH.push(originalH[i]);\\n      }\\n    }\\n    h = (interpolate(value, correctedInputRange, correctedH, Extrapolation.CLAMP) + 1) % 1;\\n  } else {\\n    h = interpolate(value, inputRange, colors.h, Extrapolation.CLAMP);\\n  }\\n  const s = interpolate(value, inputRange, colors.s, Extrapolation.CLAMP);\\n  const v = interpolate(value, inputRange, colors.v, Extrapolation.CLAMP);\\n  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\\n  return hsvToColor(h, s, v, a);\\n}\",\n  location: \"d:\\\\CODING\\\\random\\\\12-13\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\interpolateColor.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"value\\\",\\\"inputRange\\\",\\\"colors\\\",\\\"options\\\",\\\"interpolate\\\",\\\"Extrapolation\\\",\\\"hsvToColor\\\",\\\"_closure\\\",\\\"h\\\",\\\"useCorrectedHSVInterpolation\\\",\\\"correctedInputRange\\\",\\\"originalH\\\",\\\"correctedH\\\",\\\"i\\\",\\\"length\\\",\\\"d\\\",\\\"push\\\",\\\"CLAMP\\\",\\\"s\\\",\\\"v\\\",\\\"a\\\"],\\\"sources\\\":[\\\"d:/CODING/random/12-13/node_modules/react-native-reanimated/lib/module/interpolateColor.js\\\"],\\\"mappings\\\":\\\"AAmB6B,SAACA,SAAOA,CAAAC,KAAA,EAAAC,UAAkB,EAAEC,MAAA,EAAOC,OAAK;EAAA;IAAAC,WAAA;IAAAC,aAAA;IAAAC;EAAA,SAAAC,QAAA;EAGnE,IAAIC,CAAC,GAAG,CAAC;EACT,MAAM;IACJC,4BAA4B,GAAG;EACjC,CAAC,GAAGN,OAAO;EACX,IAAIM,4BAA4B,EAAE;IAKhC,MAAMC,mBAAmB,GAAG,CAACT,UAAU,CAAC,CAAC,CAAC,CAAC;IAC3C,MAAMU,SAAS,GAAGT,MAAM,CAACM,CAAC;IAC1B,MAAMI,UAAU,GAAG,CAACD,SAAS,CAAC,CAAC,CAAC,CAAC;IACjC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;MACzC,MAAME,CAAC,GAAGJ,SAAS,CAACE,CAAC,CAAC,GAAGF,SAAS,CAACE,CAAC,GAAG,CAAC,CAAC;MACzC,IAAIF,SAAS,CAACE,CAAC,CAAC,GAAGF,SAAS,CAACE,CAAC,GAAG,CAAC,CAAC,IAAIE,CAAC,GAAG,GAAG,EAAE;QAC9CL,mBAAmB,CAACM,IAAI,CAACf,UAAU,CAACY,CAAC,CAAC,CAAC;QACvCH,mBAAmB,CAACM,IAAI,CAACf,UAAU,CAACY,CAAC,CAAC,GAAG,OAAO,CAAC;QACjDD,UAAU,CAACI,IAAI,CAACL,SAAS,CAACE,CAAC,CAAC,GAAG,CAAC,CAAC;QACjCD,UAAU,CAACI,IAAI,CAACL,SAAS,CAACE,CAAC,CAAC,CAAC;MAC/B,CAAC,MAAM,IAAIF,SAAS,CAACE,CAAC,CAAC,GAAGF,SAAS,CAACE,CAAC,GAAG,CAAC,CAAC,IAAIE,CAAC,GAAG,CAAC,GAAG,EAAE;QACtDL,mBAAmB,CAACM,IAAI,CAACf,UAAU,CAACY,CAAC,CAAC,CAAC;QACvCH,mBAAmB,CAACM,IAAI,CAACf,UAAU,CAACY,CAAC,CAAC,GAAG,OAAO,CAAC;QACjDD,UAAU,CAACI,IAAI,CAACL,SAAS,CAACE,CAAC,CAAC,GAAG,CAAC,CAAC;QACjCD,UAAU,CAACI,IAAI,CAACL,SAAS,CAACE,CAAC,CAAC,CAAC;MAC/B,CAAC,MAAM;QACLH,mBAAmB,CAACM,IAAI,CAACf,UAAU,CAACY,CAAC,CAAC,CAAC;QACvCD,UAAU,CAACI,IAAI,CAACL,SAAS,CAACE,CAAC,CAAC,CAAC;MAC/B;IACF;IACAL,CAAC,GAAG,CAACJ,WAAW,CAACJ,KAAK,EAAEU,mBAAmB,EAAEE,UAAU,EAAEP,aAAa,CAACY,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC;EACxF,CAAC,MAAM;IACLT,CAAC,GAAGJ,WAAW,CAACJ,KAAK,EAAEC,UAAU,EAAEC,MAAM,CAACM,CAAC,EAAEH,aAAa,CAACY,KAAK,CAAC;EACnE;EACA,MAAMC,CAAC,GAAGd,WAAW,CAACJ,KAAK,EAAEC,UAAU,EAAEC,MAAM,CAACgB,CAAC,EAAEb,aAAa,CAACY,KAAK,CAAC;EACvE,MAAME,CAAC,GAAGf,WAAW,CAACJ,KAAK,EAAEC,UAAU,EAAEC,MAAM,CAACiB,CAAC,EAAEd,aAAa,CAACY,KAAK,CAAC;EACvE,MAAMG,CAAC,GAAGhB,WAAW,CAACJ,KAAK,EAAEC,UAAU,EAAEC,MAAM,CAACkB,CAAC,EAAEf,aAAa,CAACY,KAAK,CAAC;EACvE,OAAOX,UAAU,CAACE,CAAC,EAAEU,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;AAC/B\\\",\\\"ignoreList\\\":[]}\"\n};\nvar interpolateColorsHSV = function () {\n  var _e = [new global.Error(), -4, -27];\n  var _f = function _f(value, inputRange, colors, options) {\n    var h = 0;\n    var _options$useCorrected = options.useCorrectedHSVInterpolation,\n      useCorrectedHSVInterpolation = _options$useCorrected === void 0 ? true : _options$useCorrected;\n    if (useCorrectedHSVInterpolation) {\n      var correctedInputRange = [inputRange[0]];\n      var originalH = colors.h;\n      var correctedH = [originalH[0]];\n      for (var i = 1; i < originalH.length; ++i) {\n        var d = originalH[i] - originalH[i - 1];\n        if (originalH[i] > originalH[i - 1] && d > 0.5) {\n          correctedInputRange.push(inputRange[i]);\n          correctedInputRange.push(inputRange[i] + 0.00001);\n          correctedH.push(originalH[i] - 1);\n          correctedH.push(originalH[i]);\n        } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n          correctedInputRange.push(inputRange[i]);\n          correctedInputRange.push(inputRange[i] + 0.00001);\n          correctedH.push(originalH[i] + 1);\n          correctedH.push(originalH[i]);\n        } else {\n          correctedInputRange.push(inputRange[i]);\n          correctedH.push(originalH[i]);\n        }\n      }\n      h = (interpolate(value, correctedInputRange, correctedH, Extrapolation.CLAMP) + 1) % 1;\n    } else {\n      h = interpolate(value, inputRange, colors.h, Extrapolation.CLAMP);\n    }\n    var s = interpolate(value, inputRange, colors.s, Extrapolation.CLAMP);\n    var v = interpolate(value, inputRange, colors.v, Extrapolation.CLAMP);\n    var a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n    return hsvToColor(h, s, v, a);\n  };\n  _f._closure = {\n    interpolate: interpolate,\n    Extrapolation: Extrapolation,\n    hsvToColor: hsvToColor\n  };\n  _f.__initData = _worklet_12758345507472_init_data;\n  _f.__workletHash = 12758345507472;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}();\nvar _worklet_11271606745997_init_data = {\n  code: \"function anonymous(x, gamma) {\\n  return x.map(function (v) {\\n    return Math.pow(v / 255, gamma);\\n  });\\n}\",\n  location: \"d:\\\\CODING\\\\random\\\\12-13\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\interpolateColor.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"x\\\",\\\"gamma\\\",\\\"map\\\",\\\"v\\\",\\\"Math\\\",\\\"pow\\\"],\\\"sources\\\":[\\\"d:/CODING/random/12-13/node_modules/react-native-reanimated/lib/module/interpolateColor.js\\\"],\\\"mappings\\\":\\\"AA4DsB,SAACA,SAAGA,CAAKC,CAAA,EAAKC,KAAA;EAGlC,OAAOD,CAAC,CAACE,GAAG,CAAC,UAAAC,CAAC;IAAA,OAAIC,IAAI,CAACC,GAAG,CAACF,CAAC,GAAG,GAAG,EAAEF,KAAK,CAAC;EAAA,EAAC;AAC7C\\\",\\\"ignoreList\\\":[]}\"\n};\nvar toLinearSpace = function () {\n  var _e = [new global.Error(), 1, -27];\n  var _f = function _f(x, gamma) {\n    return x.map(function (v) {\n      return Math.pow(v / 255, gamma);\n    });\n  };\n  _f._closure = {};\n  _f.__initData = _worklet_11271606745997_init_data;\n  _f.__workletHash = 11271606745997;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}();\nvar _worklet_3404264460492_init_data = {\n  code: \"function anonymous(x, gamma) {\\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\\n}\",\n  location: \"d:\\\\CODING\\\\random\\\\12-13\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\interpolateColor.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"x\\\",\\\"gamma\\\",\\\"Math\\\",\\\"round\\\",\\\"pow\\\"],\\\"sources\\\":[\\\"d:/CODING/random/12-13/node_modules/react-native-reanimated/lib/module/interpolateColor.js\\\"],\\\"mappings\\\":\\\"AAiEqB,SAACA,SAAGA,CAAKC,CAAA,EAAKC,KAAA;EAGjC,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACJ,CAAC,EAAE,CAAC,GAAGC,KAAK,CAAC,GAAG,GAAG,CAAC;AACjD\\\",\\\"ignoreList\\\":[]}\"\n};\nvar toGammaSpace = function () {\n  var _e = [new global.Error(), 1, -27];\n  var _f = function _f(x, gamma) {\n    return Math.round(Math.pow(x, 1 / gamma) * 255);\n  };\n  _f._closure = {};\n  _f.__initData = _worklet_3404264460492_init_data;\n  _f.__workletHash = 3404264460492;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}();\nvar _worklet_7344886558018_init_data = {\n  code: \"function anonymous(value, inputRange, colors, options) {\\n  const {\\n    toLinearSpace,\\n    interpolate,\\n    Extrapolation,\\n    rgbaColor,\\n    toGammaSpace\\n  } = this._closure;\\n  const {\\n    gamma = 2.2\\n  } = options;\\n  let {\\n    r: outputR,\\n    g: outputG,\\n    b: outputB\\n  } = colors;\\n  if (gamma !== 1) {\\n    outputR = toLinearSpace(outputR, gamma);\\n    outputG = toLinearSpace(outputG, gamma);\\n    outputB = toLinearSpace(outputB, gamma);\\n  }\\n  const r = interpolate(value, inputRange, outputR, Extrapolation.CLAMP);\\n  const g = interpolate(value, inputRange, outputG, Extrapolation.CLAMP);\\n  const b = interpolate(value, inputRange, outputB, Extrapolation.CLAMP);\\n  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\\n  if (gamma === 1) {\\n    return rgbaColor(r, g, b, a);\\n  }\\n  return rgbaColor(toGammaSpace(r, gamma), toGammaSpace(g, gamma), toGammaSpace(b, gamma), a);\\n}\",\n  location: \"d:\\\\CODING\\\\random\\\\12-13\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\interpolateColor.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"value\\\",\\\"inputRange\\\",\\\"colors\\\",\\\"options\\\",\\\"toLinearSpace\\\",\\\"interpolate\\\",\\\"Extrapolation\\\",\\\"rgbaColor\\\",\\\"toGammaSpace\\\",\\\"_closure\\\",\\\"gamma\\\",\\\"r\\\",\\\"outputR\\\",\\\"g\\\",\\\"outputG\\\",\\\"b\\\",\\\"outputB\\\",\\\"CLAMP\\\",\\\"a\\\"],\\\"sources\\\":[\\\"d:/CODING/random/12-13/node_modules/react-native-reanimated/lib/module/interpolateColor.js\\\"],\\\"mappings\\\":\\\"AAsE6B,SAACA,SAAOA,CAAAC,KAAA,EAAAC,UAAkB,EAAEC,MAAA,EAAOC,OAAK;EAAA;IAAAC,aAAA;IAAAC,WAAA;IAAAC,aAAA;IAAAC,SAAA;IAAAC;EAAA,SAAAC,QAAA;EAGnE,MAAM;IACJC,KAAK,GAAG;EACV,CAAC,GAAGP,OAAO;EACX,IAAI;IACFQ,CAAC,EAAEC,OAAO;IACVC,CAAC,EAAEC,OAAO;IACVC,CAAC,EAAEC;EACL,CAAC,GAAGd,MAAM;EACV,IAAIQ,KAAK,KAAK,CAAC,EAAE;IACfE,OAAO,GAAGR,aAAa,CAACQ,OAAO,EAAEF,KAAK,CAAC;IACvCI,OAAO,GAAGV,aAAa,CAACU,OAAO,EAAEJ,KAAK,CAAC;IACvCM,OAAO,GAAGZ,aAAa,CAACY,OAAO,EAAEN,KAAK,CAAC;EACzC;EACA,MAAMC,CAAC,GAAGN,WAAW,CAACL,KAAK,EAAEC,UAAU,EAAEW,OAAO,EAAEN,aAAa,CAACW,KAAK,CAAC;EACtE,MAAMJ,CAAC,GAAGR,WAAW,CAACL,KAAK,EAAEC,UAAU,EAAEa,OAAO,EAAER,aAAa,CAACW,KAAK,CAAC;EACtE,MAAMF,CAAC,GAAGV,WAAW,CAACL,KAAK,EAAEC,UAAU,EAAEe,OAAO,EAAEV,aAAa,CAACW,KAAK,CAAC;EACtE,MAAMC,CAAC,GAAGb,WAAW,CAACL,KAAK,EAAEC,UAAU,EAAEC,MAAM,CAACgB,CAAC,EAAEZ,aAAa,CAACW,KAAK,CAAC;EACvE,IAAIP,KAAK,KAAK,CAAC,EAAE;IACf,OAAOH,SAAS,CAACI,CAAC,EAAEE,CAAC,EAAEE,CAAC,EAAEG,CAAC,CAAC;EAC9B;EACA,OAAOX,SAAS,CAACC,YAAY,CAACG,CAAC,EAAED,KAAK,CAAC,EAAEF,YAAY,CAACK,CAAC,EAAEH,KAAK,CAAC,EAAEF,YAAY,CAACO,CAAC,EAAEL,KAAK,CAAC,EAAEQ,CAAC,CAAC;AAC7F\\\",\\\"ignoreList\\\":[]}\"\n};\nvar interpolateColorsRGB = function () {\n  var _e = [new global.Error(), -6, -27];\n  var _f = function _f(value, inputRange, colors, options) {\n    var _options$gamma = options.gamma,\n      gamma = _options$gamma === void 0 ? 2.2 : _options$gamma;\n    var outputR = colors.r,\n      outputG = colors.g,\n      outputB = colors.b;\n    if (gamma !== 1) {\n      outputR = toLinearSpace(outputR, gamma);\n      outputG = toLinearSpace(outputG, gamma);\n      outputB = toLinearSpace(outputB, gamma);\n    }\n    var r = interpolate(value, inputRange, outputR, Extrapolation.CLAMP);\n    var g = interpolate(value, inputRange, outputG, Extrapolation.CLAMP);\n    var b = interpolate(value, inputRange, outputB, Extrapolation.CLAMP);\n    var a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n    if (gamma === 1) {\n      return rgbaColor(r, g, b, a);\n    }\n    return rgbaColor(toGammaSpace(r, gamma), toGammaSpace(g, gamma), toGammaSpace(b, gamma), a);\n  };\n  _f._closure = {\n    toLinearSpace: toLinearSpace,\n    interpolate: interpolate,\n    Extrapolation: Extrapolation,\n    rgbaColor: rgbaColor,\n    toGammaSpace: toGammaSpace\n  };\n  _f.__initData = _worklet_7344886558018_init_data;\n  _f.__workletHash = 7344886558018;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}();\nvar _worklet_1256647937052_init_data = {\n  code: \"function anonymous(colors) {\\n  const {\\n    processColor,\\n    red,\\n    green,\\n    blue,\\n    opacity\\n  } = this._closure;\\n  const r = [];\\n  const g = [];\\n  const b = [];\\n  const a = [];\\n  for (let i = 0; i < colors.length; ++i) {\\n    const color = colors[i];\\n    const processedColor = processColor(color);\\n    if (processedColor !== null && processedColor !== undefined) {\\n      r.push(red(processedColor));\\n      g.push(green(processedColor));\\n      b.push(blue(processedColor));\\n      a.push(opacity(processedColor));\\n    }\\n  }\\n  return {\\n    r: r,\\n    g: g,\\n    b: b,\\n    a: a\\n  };\\n}\",\n  location: \"d:\\\\CODING\\\\random\\\\12-13\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\interpolateColor.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"colors\\\",\\\"processColor\\\",\\\"red\\\",\\\"green\\\",\\\"blue\\\",\\\"opacity\\\",\\\"_closure\\\",\\\"r\\\",\\\"g\\\",\\\"b\\\",\\\"a\\\",\\\"i\\\",\\\"length\\\",\\\"color\\\",\\\"processedColor\\\",\\\"undefined\\\",\\\"push\\\"],\\\"sources\\\":[\\\"d:/CODING/random/12-13/node_modules/react-native-reanimated/lib/module/interpolateColor.js\\\"],\\\"mappings\\\":\\\"AA+F0B,SAAAA,SAAMA,CAAIC,MAAA;EAAA;IAAAC,YAAA;IAAAC,GAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC;EAAA,SAAAC,QAAA;EAGlC,MAAMC,CAAC,GAAG,EAAE;EACZ,MAAMC,CAAC,GAAG,EAAE;EACZ,MAAMC,CAAC,GAAG,EAAE;EACZ,MAAMC,CAAC,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,MAAM,CAACY,MAAM,EAAE,EAAED,CAAC,EAAE;IACtC,MAAME,KAAK,GAAGb,MAAM,CAACW,CAAC,CAAC;IACvB,MAAMG,cAAc,GAAGb,YAAY,CAACY,KAAK,CAAC;IAE1C,IAAIC,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAKC,SAAS,EAAE;MAC3DR,CAAC,CAACS,IAAI,CAACd,GAAG,CAACY,cAAc,CAAC,CAAC;MAC3BN,CAAC,CAACQ,IAAI,CAACb,KAAK,CAACW,cAAc,CAAC,CAAC;MAC7BL,CAAC,CAACO,IAAI,CAACZ,IAAI,CAACU,cAAc,CAAC,CAAC;MAC5BJ,CAAC,CAACM,IAAI,CAACX,OAAO,CAACS,cAAc,CAAC,CAAC;IACjC;EACF;EACA,OAAO;IACLP,CAAC,EAADA,CAAC;IACDC,CAAC,EAADA,CAAC;IACDC,CAAC,EAADA,CAAC;IACDC,CAAA,EAAAA;EACF,CAAC;AACH\\\",\\\"ignoreList\\\":[]}\"\n};\nvar getInterpolateRGB = function () {\n  var _e = [new global.Error(), -6, -27];\n  var _f = function _f(colors) {\n    var r = [];\n    var g = [];\n    var b = [];\n    var a = [];\n    for (var i = 0; i < colors.length; ++i) {\n      var color = colors[i];\n      var processedColor = processColor(color);\n      if (processedColor !== null && processedColor !== undefined) {\n        r.push(red(processedColor));\n        g.push(green(processedColor));\n        b.push(blue(processedColor));\n        a.push(opacity(processedColor));\n      }\n    }\n    return {\n      r: r,\n      g: g,\n      b: b,\n      a: a\n    };\n  };\n  _f._closure = {\n    processColor: processColor,\n    red: red,\n    green: green,\n    blue: blue,\n    opacity: opacity\n  };\n  _f.__initData = _worklet_1256647937052_init_data;\n  _f.__workletHash = 1256647937052;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}();\nvar _worklet_4205888180392_init_data = {\n  code: \"function anonymous(colors) {\\n  const {\\n    processColor,\\n    RGBtoHSV,\\n    red,\\n    green,\\n    blue,\\n    opacity\\n  } = this._closure;\\n  const h = [];\\n  const s = [];\\n  const v = [];\\n  const a = [];\\n  for (let i = 0; i < colors.length; ++i) {\\n    const color = colors[i];\\n    const processedColor = processColor(color);\\n    if (typeof processedColor === 'number') {\\n      const processedHSVColor = RGBtoHSV(red(processedColor), green(processedColor), blue(processedColor));\\n      h.push(processedHSVColor.h);\\n      s.push(processedHSVColor.s);\\n      v.push(processedHSVColor.v);\\n      a.push(opacity(processedColor));\\n    }\\n  }\\n  return {\\n    h: h,\\n    s: s,\\n    v: v,\\n    a: a\\n  };\\n}\",\n  location: \"d:\\\\CODING\\\\random\\\\12-13\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\interpolateColor.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"colors\\\",\\\"processColor\\\",\\\"RGBtoHSV\\\",\\\"red\\\",\\\"green\\\",\\\"blue\\\",\\\"opacity\\\",\\\"_closure\\\",\\\"h\\\",\\\"s\\\",\\\"v\\\",\\\"a\\\",\\\"i\\\",\\\"length\\\",\\\"color\\\",\\\"processedColor\\\",\\\"processedHSVColor\\\",\\\"push\\\"],\\\"sources\\\":[\\\"d:/CODING/random/12-13/node_modules/react-native-reanimated/lib/module/interpolateColor.js\\\"],\\\"mappings\\\":\\\"AAwH0B,SAAAA,SAAMA,CAAIC,MAAA;EAAA;IAAAC,YAAA;IAAAC,QAAA;IAAAC,GAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC;EAAA,SAAAC,QAAA;EAGlC,MAAMC,CAAC,GAAG,EAAE;EACZ,MAAMC,CAAC,GAAG,EAAE;EACZ,MAAMC,CAAC,GAAG,EAAE;EACZ,MAAMC,CAAC,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,MAAM,CAACa,MAAM,EAAE,EAAED,CAAC,EAAE;IACtC,MAAME,KAAK,GAAGd,MAAM,CAACY,CAAC,CAAC;IACvB,MAAMG,cAAc,GAAGd,YAAY,CAACa,KAAK,CAAC;IAC1C,IAAI,OAAOC,cAAc,KAAK,QAAQ,EAAE;MACtC,MAAMC,iBAAiB,GAAGd,QAAQ,CAACC,GAAG,CAACY,cAAc,CAAC,EAAEX,KAAK,CAACW,cAAc,CAAC,EAAEV,IAAI,CAACU,cAAc,CAAC,CAAC;MACpGP,CAAC,CAACS,IAAI,CAACD,iBAAiB,CAACR,CAAC,CAAC;MAC3BC,CAAC,CAACQ,IAAI,CAACD,iBAAiB,CAACP,CAAC,CAAC;MAC3BC,CAAC,CAACO,IAAI,CAACD,iBAAiB,CAACN,CAAC,CAAC;MAC3BC,CAAC,CAACM,IAAI,CAACX,OAAO,CAACS,cAAc,CAAC,CAAC;IACjC;EACF;EACA,OAAO;IACLP,CAAC,EAADA,CAAC;IACDC,CAAC,EAADA,CAAC;IACDC,CAAC,EAADA,CAAC;IACDC,CAAA,EAAAA;EACF,CAAC;AACH\\\",\\\"ignoreList\\\":[]}\"\n};\nvar getInterpolateHSV = function () {\n  var _e = [new global.Error(), -7, -27];\n  var _f = function _f(colors) {\n    var h = [];\n    var s = [];\n    var v = [];\n    var a = [];\n    for (var i = 0; i < colors.length; ++i) {\n      var color = colors[i];\n      var processedColor = processColor(color);\n      if (typeof processedColor === 'number') {\n        var processedHSVColor = RGBtoHSV(red(processedColor), green(processedColor), blue(processedColor));\n        h.push(processedHSVColor.h);\n        s.push(processedHSVColor.s);\n        v.push(processedHSVColor.v);\n        a.push(opacity(processedColor));\n      }\n    }\n    return {\n      h: h,\n      s: s,\n      v: v,\n      a: a\n    };\n  };\n  _f._closure = {\n    processColor: processColor,\n    RGBtoHSV: RGBtoHSV,\n    red: red,\n    green: green,\n    blue: blue,\n    opacity: opacity\n  };\n  _f.__initData = _worklet_4205888180392_init_data;\n  _f.__workletHash = 4205888180392;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}();\nvar _worklet_13059691451842_init_data = {\n  code: \"function interpolateColor(value, inputRange, outputRange, colorSpace = 'RGB', options = {}) {\\n  const {\\n    interpolateColorsHSV,\\n    getInterpolateHSV,\\n    interpolateColorsRGB,\\n    getInterpolateRGB,\\n    ReanimatedError\\n  } = this._closure;\\n  if (colorSpace === 'HSV') {\\n    return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);\\n  } else if (colorSpace === 'RGB') {\\n    return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);\\n  }\\n  throw new ReanimatedError(\\\"Invalid color space provided: \\\" + colorSpace + \\\". Supported values are: ['RGB', 'HSV'].\\\");\\n}\",\n  location: \"d:\\\\CODING\\\\random\\\\12-13\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\interpolateColor.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"interpolateColor\\\",\\\"value\\\",\\\"inputRange\\\",\\\"outputRange\\\",\\\"colorSpace\\\",\\\"options\\\",\\\"interpolateColorsHSV\\\",\\\"getInterpolateHSV\\\",\\\"interpolateColorsRGB\\\",\\\"getInterpolateRGB\\\",\\\"ReanimatedError\\\",\\\"_closure\\\"],\\\"sources\\\":[\\\"d:/CODING/random/12-13/node_modules/react-native-reanimated/lib/module/interpolateColor.js\\\"],\\\"mappings\\\":\\\"AAqKO,SAAAA,gBAASA,CAAiBC,KAAA,EAAKC,UAAE,EAAUC,WAAE,EAAWC,UAAE,GAAU,KAAG,EAAKC,OAAE,GAAO,CAAI,CAAC;EAAA;IAAAC,oBAAA;IAAAC,iBAAA;IAAAC,oBAAA;IAAAC,iBAAA;IAAAC;EAAA,SAAAC,QAAA;EAG/F,IAAIP,UAAU,KAAK,KAAK,EAAE;IACxB,OAAOE,oBAAoB,CAACL,KAAK,EAAEC,UAAU,EAAEK,iBAAiB,CAACJ,WAAW,CAAC,EAAEE,OAAO,CAAC;EACzF,CAAC,MAAM,IAAID,UAAU,KAAK,KAAK,EAAE;IAC/B,OAAOI,oBAAoB,CAACP,KAAK,EAAEC,UAAU,EAAEO,iBAAiB,CAACN,WAAW,CAAC,EAAEE,OAAO,CAAC;EACzF;EACA,MAAM,IAAIK,eAAe,oCAAkCN,UAAU,4CAAyC,CAAC;AACjH\\\",\\\"ignoreList\\\":[]}\"\n};\nexport var interpolateColor = function () {\n  var _e = [new global.Error(), -6, -27];\n  var _f = function _f(value, inputRange, outputRange) {\n    var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    if (colorSpace === 'HSV') {\n      return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);\n    } else if (colorSpace === 'RGB') {\n      return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);\n    }\n    throw new ReanimatedError(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV'].`);\n  };\n  _f._closure = {\n    interpolateColorsHSV: interpolateColorsHSV,\n    getInterpolateHSV: getInterpolateHSV,\n    interpolateColorsRGB: interpolateColorsRGB,\n    getInterpolateRGB: getInterpolateRGB,\n    ReanimatedError: ReanimatedError\n  };\n  _f.__initData = _worklet_13059691451842_init_data;\n  _f.__workletHash = 13059691451842;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}();\nexport var ColorSpace = function (ColorSpace) {\n  ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n  ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n  return ColorSpace;\n}({});\nexport function useInterpolateConfig(inputRange, outputRange) {\n  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorSpace.RGB;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return useSharedValue({\n    inputRange: inputRange,\n    outputRange: outputRange,\n    colorSpace: colorSpace,\n    cache: makeMutable(null),\n    options: options\n  });\n}","map":{"version":3,"names":["hsvToColor","RGBtoHSV","rgbaColor","processColor","red","green","blue","opacity","makeMutable","Extrapolation","interpolate","useSharedValue","ReanimatedError","Extrapolate","_worklet_12758345507472_init_data","code","location","sourceMap","interpolateColorsHSV","_e","global","Error","_f","value","inputRange","colors","options","h","_options$useCorrected","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","CLAMP","s","v","a","_closure","__initData","__workletHash","__stackDetails","__version","_worklet_11271606745997_init_data","toLinearSpace","x","gamma","map","Math","pow","_worklet_3404264460492_init_data","toGammaSpace","round","_worklet_7344886558018_init_data","interpolateColorsRGB","_options$gamma","outputR","r","outputG","g","outputB","b","_worklet_1256647937052_init_data","getInterpolateRGB","color","processedColor","undefined","_worklet_4205888180392_init_data","getInterpolateHSV","processedHSVColor","_worklet_13059691451842_init_data","interpolateColor","outputRange","colorSpace","arguments","ColorSpace","useInterpolateConfig","RGB","cache"],"sources":["d:\\CODING\\random\\12-13\\node_modules\\react-native-reanimated\\src\\interpolateColor.ts"],"sourcesContent":["'use strict';\nimport {\n  hsvToColor,\n  RGBtoHSV,\n  rgbaColor,\n  processColor,\n  red,\n  green,\n  blue,\n  opacity,\n} from './Colors';\nimport { makeMutable } from './core';\nimport { Extrapolation, interpolate } from './interpolation';\nimport type { SharedValue } from './commonTypes';\nimport { useSharedValue } from './hook/useSharedValue';\nimport { ReanimatedError } from './errors';\n\n/** @deprecated Please use Extrapolation instead */\nexport const Extrapolate = Extrapolation;\n\n/**\n * Options for color interpolation.\n *\n * @param gamma - Gamma value used in gamma correction. Defaults to `2.2`.\n * @param useCorrectedHSVInterpolation - Whether to reduce the number of colors\n *   the interpolation has to go through. Defaults to `true`.\n */\nexport type InterpolationOptions = {\n  gamma?: number;\n  useCorrectedHSVInterpolation?: boolean;\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateHSV,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  let h = 0;\n  const { useCorrectedHSVInterpolation = true } = options;\n  if (useCorrectedHSVInterpolation) {\n    // if the difference between hues in a range is > 180 deg\n    // then move the hue at the right end of the range +/- 360 deg\n    // and add the next point in the original place + 0.00001 with original hue\n    // to not break the next range\n    const correctedInputRange = [inputRange[0]];\n    const originalH = colors.h;\n    const correctedH = [originalH[0]];\n\n    for (let i = 1; i < originalH.length; ++i) {\n      const d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h =\n      (interpolate(\n        value,\n        correctedInputRange,\n        correctedH,\n        Extrapolation.CLAMP\n      ) +\n        1) %\n      1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolation.CLAMP);\n  }\n  const s = interpolate(value, inputRange, colors.s, Extrapolation.CLAMP);\n  const v = interpolate(value, inputRange, colors.v, Extrapolation.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\n\nconst toLinearSpace = (x: number[], gamma: number): number[] => {\n  'worklet';\n  return x.map((v) => Math.pow(v / 255, gamma));\n};\n\nconst toGammaSpace = (x: number, gamma: number): number => {\n  'worklet';\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateRGB,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  const { gamma = 2.2 } = options;\n  let { r: outputR, g: outputG, b: outputB } = colors;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  const r = interpolate(value, inputRange, outputR, Extrapolation.CLAMP);\n  const g = interpolate(value, inputRange, outputG, Extrapolation.CLAMP);\n  const b = interpolate(value, inputRange, outputB, Extrapolation.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(\n    toGammaSpace(r, gamma),\n    toGammaSpace(g, gamma),\n    toGammaSpace(b, gamma),\n    a\n  );\n};\n\nexport interface InterpolateRGB {\n  r: number[];\n  g: number[];\n  b: number[];\n  a: number[];\n}\n\nconst getInterpolateRGB = (\n  colors: readonly (string | number)[]\n): InterpolateRGB => {\n  'worklet';\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color);\n    // explicit check in case if processedColor is 0\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return { r, g, b, a };\n};\n\nexport interface InterpolateHSV {\n  h: number[];\n  s: number[];\n  v: number[];\n  a: number[];\n}\n\nconst getInterpolateHSV = (\n  colors: readonly (string | number)[]\n): InterpolateHSV => {\n  'worklet';\n  const h = [];\n  const s = [];\n  const v = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color) as any;\n    if (typeof processedColor === 'number') {\n      const processedHSVColor = RGBtoHSV(\n        red(processedColor),\n        green(processedColor),\n        blue(processedColor)\n      );\n\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push(opacity(processedColor));\n    }\n  }\n  return { h, s, v, a };\n};\n\n/**\n * Lets you map a value from a range of numbers to a range of colors using\n * linear interpolation.\n *\n * @param value - A number from the `input` range that is going to be mapped to\n *   the color in the `output` range.\n * @param inputRange - An array of numbers specifying the input range of the\n *   interpolation.\n * @param outputRange - An array of output colors values (eg. \"red\", \"#00FFCC\",\n *   \"rgba(255, 0, 0, 0.5)\").\n * @param colorSpace - The color space to use for interpolation. Defaults to\n *   'RGB'.\n * @param options - Additional options for interpolation -\n *   {@link InterpolationOptions}.\n * @returns The color after interpolation from within the output range in\n *   rgba(r, g, b, a) format.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolateColor\n */\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly string[],\n  colorSpace?: 'RGB' | 'HSV',\n  options?: InterpolationOptions\n): string;\n\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly number[],\n  colorSpace?: 'RGB' | 'HSV',\n  options?: InterpolationOptions\n): number;\n\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' = 'RGB',\n  options: InterpolationOptions = {}\n): string | number {\n  'worklet';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(\n      value,\n      inputRange,\n      getInterpolateHSV(outputRange),\n      options\n    );\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(\n      value,\n      inputRange,\n      getInterpolateRGB(outputRange),\n      options\n    );\n  }\n  throw new ReanimatedError(\n    `Invalid color space provided: ${\n      colorSpace as string\n    }. Supported values are: ['RGB', 'HSV'].`\n  );\n}\n\nexport enum ColorSpace {\n  RGB = 0,\n  HSV = 1,\n}\n\nexport interface InterpolateConfig {\n  inputRange: readonly number[];\n  outputRange: readonly (string | number)[];\n  colorSpace: ColorSpace;\n  cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;\n  options: InterpolationOptions;\n}\n\nexport function useInterpolateConfig(\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace = ColorSpace.RGB,\n  options: InterpolationOptions = {}\n): SharedValue<InterpolateConfig> {\n  return useSharedValue<InterpolateConfig>({\n    inputRange,\n    outputRange,\n    colorSpace,\n    cache: makeMutable<InterpolateRGB | InterpolateHSV | null>(null),\n    options,\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}