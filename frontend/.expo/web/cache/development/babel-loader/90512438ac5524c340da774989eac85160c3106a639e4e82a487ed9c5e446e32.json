{"ast":null,"code":"'use strict';\n\nimport { useEffect, useRef, useCallback } from 'react';\nimport { useEvent } from \"./useEvent.js\";\nimport { useSharedValue } from \"./useSharedValue.js\";\nimport { isWeb } from \"../PlatformChecker.js\";\nvar IS_WEB = isWeb();\nexport var useScrollViewOffset = IS_WEB ? useScrollViewOffsetWeb : useScrollViewOffsetNative;\nvar _worklet_7822041465426_init_data = {\n  code: \"function anonymous() {\\n  const {\\n    animatedRef,\\n    getWebScrollableElement,\\n    offset\\n  } = this._closure;\\n  if (animatedRef) {\\n    const element = getWebScrollableElement(animatedRef.current);\\n    offset.value = element.scrollLeft === 0 ? element.scrollTop : element.scrollLeft;\\n  }\\n}\",\n  location: \"d:\\\\CODING\\\\random\\\\12-13\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\hook\\\\useScrollViewOffset.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"animatedRef\\\",\\\"getWebScrollableElement\\\",\\\"offset\\\",\\\"_closure\\\",\\\"element\\\",\\\"current\\\",\\\"value\\\",\\\"scrollLeft\\\",\\\"scrollTop\\\"],\\\"sources\\\":[\\\"d:/CODING/random/12-13/node_modules/react-native-reanimated/lib/module/hook/useScrollViewOffset.js\\\"],\\\"mappings\\\":\\\"AAqBmC,SAAAA,SAAMA,CAAA;EAAA;IAAAC,WAAA;IAAAC,uBAAA;IAAAC;EAAA,SAAAC,QAAA;EAGrC,IAAIH,WAAW,EAAE;IACf,MAAMI,OAAO,GAAGH,uBAAuB,CAACD,WAAW,CAACK,OAAO,CAAC;IAE5DH,MAAM,CAACI,KAAK,GAAGF,OAAO,CAACG,UAAU,KAAK,CAAC,GAAGH,OAAO,CAACI,SAAS,GAAGJ,OAAO,CAACG,UAAU;EAClF;AAEF\\\",\\\"ignoreList\\\":[]}\"\n};\nfunction useScrollViewOffsetWeb(animatedRef, providedOffset) {\n  var internalOffset = useSharedValue(0);\n  var offset = useRef(providedOffset != null ? providedOffset : internalOffset).current;\n  var eventHandler = useCallback(function () {\n    var _e = [new global.Error(), -4, -27];\n    var _f = function _f() {\n      if (animatedRef) {\n        var element = getWebScrollableElement(animatedRef.current);\n        offset.value = element.scrollLeft === 0 ? element.scrollTop : element.scrollLeft;\n      }\n    };\n    _f._closure = {\n      animatedRef: animatedRef,\n      getWebScrollableElement: getWebScrollableElement,\n      offset: offset\n    };\n    _f.__initData = _worklet_7822041465426_init_data;\n    _f.__workletHash = 7822041465426;\n    _f.__stackDetails = _e;\n    _f.__version = \"3.3.0\";\n    return _f;\n  }(), [animatedRef, animatedRef == null ? void 0 : animatedRef.current]);\n  useEffect(function () {\n    var element = animatedRef != null && animatedRef.current ? getWebScrollableElement(animatedRef.current) : null;\n    if (element) {\n      element.addEventListener('scroll', eventHandler);\n    }\n    return function () {\n      if (element) {\n        element.removeEventListener('scroll', eventHandler);\n      }\n    };\n  }, [animatedRef, animatedRef == null ? void 0 : animatedRef.current, eventHandler]);\n  return offset;\n}\nvar _worklet_14410088454670_init_data = {\n  code: \"function anonymous(event) {\\n  const {\\n    offset\\n  } = this._closure;\\n  offset.value = event.contentOffset.x === 0 ? event.contentOffset.y : event.contentOffset.x;\\n}\",\n  location: \"d:\\\\CODING\\\\random\\\\12-13\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\hook\\\\useScrollViewOffset.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"event\\\",\\\"offset\\\",\\\"_closure\\\",\\\"value\\\",\\\"contentOffset\\\",\\\"x\\\",\\\"y\\\"],\\\"sources\\\":[\\\"d:/CODING/random/12-13/node_modules/react-native-reanimated/lib/module/hook/useScrollViewOffset.js\\\"],\\\"mappings\\\":\\\"AAmDgC,SAAAA,SAASA,CAAAC,KAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAGrCD,MAAM,CAACE,KAAK,GAAGH,KAAK,CAACI,aAAa,CAACC,CAAC,KAAK,CAAC,GAAGL,KAAK,CAACI,aAAa,CAACE,CAAC,GAAGN,KAAK,CAACI,aAAa,CAACC,CAAC;AAC5F\\\",\\\"ignoreList\\\":[]}\"\n};\nfunction useScrollViewOffsetNative(animatedRef, providedOffset) {\n  var internalOffset = useSharedValue(0);\n  var offset = useRef(providedOffset != null ? providedOffset : internalOffset).current;\n  var eventHandler = useEvent(function () {\n    var _e = [new global.Error(), -2, -27];\n    var _f = function _f(event) {\n      offset.value = event.contentOffset.x === 0 ? event.contentOffset.y : event.contentOffset.x;\n    };\n    _f._closure = {\n      offset: offset\n    };\n    _f.__initData = _worklet_14410088454670_init_data;\n    _f.__workletHash = 14410088454670;\n    _f.__stackDetails = _e;\n    _f.__version = \"3.3.0\";\n    return _f;\n  }(), scrollNativeEventNames);\n  useEffect(function () {\n    var _animatedRef$getTag;\n    var elementTag = (_animatedRef$getTag = animatedRef == null ? void 0 : animatedRef.getTag()) != null ? _animatedRef$getTag : null;\n    if (elementTag) {\n      eventHandler.workletEventHandler.registerForEvents(elementTag);\n    }\n    return function () {\n      if (elementTag) {\n        eventHandler.workletEventHandler.unregisterFromEvents(elementTag);\n      }\n    };\n  }, [animatedRef, animatedRef == null ? void 0 : animatedRef.current, eventHandler]);\n  return offset;\n}\nfunction getWebScrollableElement(scrollComponent) {\n  var _scrollComponent$getS;\n  return (_scrollComponent$getS = scrollComponent == null ? void 0 : scrollComponent.getScrollableNode()) != null ? _scrollComponent$getS : scrollComponent;\n}\nvar scrollNativeEventNames = ['onScroll', 'onScrollBeginDrag', 'onScrollEndDrag', 'onMomentumScrollBegin', 'onMomentumScrollEnd'];","map":{"version":3,"names":["useEffect","useRef","useCallback","useEvent","useSharedValue","isWeb","IS_WEB","useScrollViewOffset","useScrollViewOffsetWeb","useScrollViewOffsetNative","_worklet_7822041465426_init_data","code","location","sourceMap","animatedRef","providedOffset","internalOffset","offset","current","eventHandler","_e","global","Error","_f","element","getWebScrollableElement","value","scrollLeft","scrollTop","_closure","__initData","__workletHash","__stackDetails","__version","addEventListener","removeEventListener","_worklet_14410088454670_init_data","event","contentOffset","x","y","scrollNativeEventNames","_animatedRef$getTag","elementTag","getTag","workletEventHandler","registerForEvents","unregisterFromEvents","scrollComponent","_scrollComponent$getS","getScrollableNode"],"sources":["d:\\CODING\\random\\12-13\\node_modules\\react-native-reanimated\\src\\hook\\useScrollViewOffset.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef, useCallback } from 'react';\nimport type { SharedValue } from '../commonTypes';\nimport type { EventHandlerInternal } from './useEvent';\nimport { useEvent } from './useEvent';\nimport { useSharedValue } from './useSharedValue';\nimport type { AnimatedScrollView } from '../component/ScrollView';\nimport type {\n  AnimatedRef,\n  RNNativeScrollEvent,\n  ReanimatedScrollEvent,\n} from './commonTypes';\nimport { isWeb } from '../PlatformChecker';\n\nconst IS_WEB = isWeb();\n\n/**\n * Lets you synchronously get the current offset of a `ScrollView`.\n *\n * @param animatedRef - An [animated\n *   ref](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef)\n *   attached to an Animated.ScrollView component.\n * @returns A shared value which holds the current offset of the `ScrollView`.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/scroll/useScrollViewOffset\n */\nexport const useScrollViewOffset = IS_WEB\n  ? useScrollViewOffsetWeb\n  : useScrollViewOffsetNative;\n\nfunction useScrollViewOffsetWeb(\n  animatedRef: AnimatedRef<AnimatedScrollView> | null,\n  providedOffset?: SharedValue<number>\n): SharedValue<number> {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n\n  const eventHandler = useCallback(() => {\n    'worklet';\n    if (animatedRef) {\n      const element = getWebScrollableElement(animatedRef.current);\n      // scrollLeft is the X axis scrolled offset, works properly also with RTL layout\n      offset.value =\n        element.scrollLeft === 0 ? element.scrollTop : element.scrollLeft;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef?.current]);\n\n  useEffect(() => {\n    const element = animatedRef?.current\n      ? getWebScrollableElement(animatedRef.current)\n      : null;\n\n    if (element) {\n      element.addEventListener('scroll', eventHandler);\n    }\n    return () => {\n      if (element) {\n        element.removeEventListener('scroll', eventHandler);\n      }\n    };\n    // React here has a problem with `animatedRef.current` since a Ref .current\n    // field shouldn't be used as a dependency. However, in this case we have\n    // to do it this way.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef?.current, eventHandler]);\n\n  return offset;\n}\n\nfunction useScrollViewOffsetNative(\n  animatedRef: AnimatedRef<AnimatedScrollView> | null,\n  providedOffset?: SharedValue<number>\n): SharedValue<number> {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n\n  const eventHandler = useEvent<RNNativeScrollEvent>(\n    (event: ReanimatedScrollEvent) => {\n      'worklet';\n      offset.value =\n        event.contentOffset.x === 0\n          ? event.contentOffset.y\n          : event.contentOffset.x;\n    },\n    scrollNativeEventNames\n    // Read https://github.com/software-mansion/react-native-reanimated/pull/5056\n    // for more information about this cast.\n  ) as unknown as EventHandlerInternal<ReanimatedScrollEvent>;\n\n  useEffect(() => {\n    const elementTag = animatedRef?.getTag() ?? null;\n\n    if (elementTag) {\n      eventHandler.workletEventHandler.registerForEvents(elementTag);\n    }\n    return () => {\n      if (elementTag) {\n        eventHandler.workletEventHandler.unregisterFromEvents(elementTag);\n      }\n    };\n    // React here has a problem with `animatedRef.current` since a Ref .current\n    // field shouldn't be used as a dependency. However, in this case we have\n    // to do it this way.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef?.current, eventHandler]);\n\n  return offset;\n}\n\nfunction getWebScrollableElement(\n  scrollComponent: AnimatedScrollView | null\n): HTMLElement {\n  return (\n    (scrollComponent?.getScrollableNode() as unknown as HTMLElement) ??\n    scrollComponent\n  );\n}\n\nconst scrollNativeEventNames = [\n  'onScroll',\n  'onScrollBeginDrag',\n  'onScrollEndDrag',\n  'onMomentumScrollBegin',\n  'onMomentumScrollEnd',\n];\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAGtD,SAASC,QAAQ;AACjB,SAASC,cAAc;AAOvB,SAASC,KAAK;AAEd,IAAMC,MAAM,GAAGD,KAAK,CAAC,CAAC;AAWtB,OAAO,IAAME,mBAAmB,GAAGD,MAAM,GACrCE,sBAAsB,GACtBC,yBAAyB;AAAA,IAAAC,gCAAA;EAAAC,IAAA;EAAAC,QAAA;EAAAC,SAAA;AAAA;AAE7B,SAASL,sBAAsBA,CAC7BM,WAAmD,EACnDC,cAAoC,EACf;EACrB,IAAMC,cAAc,GAAGZ,cAAc,CAAC,CAAC,CAAC;EACxC,IAAMa,MAAM,GAAGhB,MAAM,CAACc,cAAc,WAAdA,cAAc,GAAIC,cAAc,CAAC,CAACE,OAAO;EAE/D,IAAMC,YAAY,GAAGjB,WAAW;IAAA,IAAAkB,EAAA,QAAAC,MAAA,CAAAC,KAAA;IAAA,IAAAC,EAAA,YAAAA,GAAA,EAAO;MAErC,IAAIT,WAAW,EAAE;QACf,IAAMU,OAAO,GAAGC,uBAAuB,CAACX,WAAW,CAACI,OAAO,CAAC;QAE5DD,MAAM,CAACS,KAAK,GACVF,OAAO,CAACG,UAAU,KAAK,CAAC,GAAGH,OAAO,CAACI,SAAS,GAAGJ,OAAO,CAACG,UAAU;MACrE;IAEF,CAAC;IAAAJ,EAAA,CAAAM,QAAA;MAAAf,WAAA,EA5CoCA,WAAe;MAAAW,uBAAA,EAAlCA,uBAAmB;MAAAR,MAAA,EAIvCA;IAAS;IAAAM,EAAA,CAAAO,UAAA,GAAApB,gCAAA;IAAAa,EAAA,CAAAQ,aAAA;IAAAR,EAAA,CAAAS,cAAA,GAAAZ,EAAA;IAAAG,EAAA,CAAAU,SAAA;IAAA,OAAAV,EAAA;EAAA,KAwCJ,CAACT,WAAW,EAAEA,WAAW,oBAAXA,WAAW,CAAEI,OAAO,CAAC,CAAC;EAEvClB,SAAS,CAAC,YAAM;IACd,IAAMwB,OAAO,GAAGV,WAAW,YAAXA,WAAW,CAAEI,OAAO,GAChCO,uBAAuB,CAACX,WAAW,CAACI,OAAO,CAAC,GAC5C,IAAI;IAER,IAAIM,OAAO,EAAE;MACXA,OAAO,CAACU,gBAAgB,CAAC,QAAQ,EAAEf,YAAY,CAAC;IAClD;IACA,OAAO,YAAM;MACX,IAAIK,OAAO,EAAE;QACXA,OAAO,CAACW,mBAAmB,CAAC,QAAQ,EAAEhB,YAAY,CAAC;MACrD;IACF,CAAC;EAKH,CAAC,EAAE,CAACL,WAAW,EAAEA,WAAW,oBAAXA,WAAW,CAAEI,OAAO,EAAEC,YAAY,CAAC,CAAC;EAErD,OAAOF,MAAM;AACf;AAAA,IAAAmB,iCAAA;EAAAzB,IAAA;EAAAC,QAAA;EAAAC,SAAA;AAAA;AAEA,SAASJ,yBAAyBA,CAChCK,WAAmD,EACnDC,cAAoC,EACf;EACrB,IAAMC,cAAc,GAAGZ,cAAc,CAAC,CAAC,CAAC;EACxC,IAAMa,MAAM,GAAGhB,MAAM,CAACc,cAAc,WAAdA,cAAc,GAAIC,cAAc,CAAC,CAACE,OAAO;EAE/D,IAAMC,YAAY,GAAGhB,QAAQ;IAAA,IAAAiB,EAAA,QAAAC,MAAA,CAAAC,KAAA;IAAA,IAAAC,EAAA,YAAAA,GAC1Bc,KAA4B,EAAK;MAEhCpB,MAAM,CAACS,KAAK,GACVW,KAAK,CAACC,aAAa,CAACC,CAAC,KAAK,CAAC,GACvBF,KAAK,CAACC,aAAa,CAACE,CAAC,GACrBH,KAAK,CAACC,aAAa,CAACC,CAAC;IAC7B,CAAC;IAAAhB,EAAA,CAAAM,QAAA;MAAAZ,MAAA,E;;;;;;;OACDwB,sBAGF,CAA2D;EAE3DzC,SAAS,CAAC,YAAM;IAAA,IAAA0C,mBAAA;IACd,IAAMC,UAAU,IAAAD,mBAAA,GAAG5B,WAAW,oBAAXA,WAAW,CAAE8B,MAAM,CAAC,CAAC,YAAAF,mBAAA,GAAI,IAAI;IAEhD,IAAIC,UAAU,EAAE;MACdxB,YAAY,CAAC0B,mBAAmB,CAACC,iBAAiB,CAACH,UAAU,CAAC;IAChE;IACA,OAAO,YAAM;MACX,IAAIA,UAAU,EAAE;QACdxB,YAAY,CAAC0B,mBAAmB,CAACE,oBAAoB,CAACJ,UAAU,CAAC;MACnE;IACF,CAAC;EAKH,CAAC,EAAE,CAAC7B,WAAW,EAAEA,WAAW,oBAAXA,WAAW,CAAEI,OAAO,EAAEC,YAAY,CAAC,CAAC;EAErD,OAAOF,MAAM;AACf;AAEA,SAASQ,uBAAuBA,CAC9BuB,eAA0C,EAC7B;EAAA,IAAAC,qBAAA;EACb,QAAAA,qBAAA,GACGD,eAAe,oBAAfA,eAAe,CAAEE,iBAAiB,CAAC,CAAC,YAAAD,qBAAA,GACrCD,eAAe;AAEnB;AAEA,IAAMP,sBAAsB,GAAG,CAC7B,UAAU,EACV,mBAAmB,EACnB,iBAAiB,EACjB,uBAAuB,EACvB,qBAAqB,CACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}